const { app, BrowserWindow, protocol, ipcMain, dialog } = require("electron");
const path = require("path");
const { pathToFileURL } = require("url");
const fs = require("fs");

const OUT_DIR = path.join(__dirname, "..", "out");

function interceptStatic() {
  protocol.interceptFileProtocol("file", (request, callback) => {
    try {
      // file:///... -> строка пути
      const raw = decodeURI(request.url).replace(/^file:\/\//, "");
      // Абсолюты Next/статки -> из OUT_DIR
      if (
        raw.startsWith("/_next/") ||
        raw.startsWith("/fonts/") ||
        raw.startsWith("/images/") ||
        /^\/(favicon|icon|apple|manifest)/.test(raw) ||
        raw === "/"
      ) {
        const p = path.join(OUT_DIR, raw === "/" ? "index.html" : raw);
        return callback({ path: p });
      }
      // Полные пути ОС — как есть
      if (path.isAbsolute(raw)) return callback({ path: raw });
      // Остальное — как есть
      return callback({ path: raw });
    } catch (e) {
      console.error("[intercept error]", e);
      callback({ path: request.url.replace(/^file:\/\//, "") });
    }
  });
}

// Полностраничный PNG (остаётся как раньше)
async function captureFullPage(targetWin){
  if (!targetWin) return { ok:false, reason:'no-window' };
  const wc = targetWin.webContents;
  const info = await wc.executeJavaScript(`(() => {
    const s = document.scrollingElement || document.querySelector('main') || document.getElementById('__next') || document.body || document.documentElement;
    return { totalWidth: s.scrollWidth, totalHeight: s.scrollHeight, dpr: devicePixelRatio||1 };
  })()`, true);
  const { totalWidth, totalHeight } = info || {};
  if (!totalWidth || !totalHeight) return { ok:false, reason:'bad-size' };

  const before = targetWin.getContentBounds();
  try{
    targetWin.setContentSize(Math.max(totalWidth, 800), Math.max(totalHeight, 600));
    await new Promise(r=>setTimeout(r,180));
    const image = await wc.capturePage();
    const { canceled, filePath } = await dialog.showSaveDialog(targetWin, {
      title:'Save PNG',
      defaultPath:`onepager-${new Date().toISOString().split('T')[0]}.png`,
      filters:[{name:'PNG Image', extensions:['png']}]
    });
    if (!canceled && filePath) {
      fs.writeFileSync(filePath, image.toPNG());
      return { ok:true, filePath };
    }
    return { ok:false, reason:'canceled' };
  } catch (e) {
    console.error('[captureFullPage]', e);
    return { ok:false, reason:String(e) };
  } finally {
    targetWin.setContentSize(before.width, before.height);
  }
}

ipcMain.handle('export-fullpage-png', async (e) => {
  const win = BrowserWindow.fromWebContents(e.sender);
  return await captureFullPage(win);
});

function createWindow() {
  const win = new BrowserWindow({
    width: 1440,
    height: 900,
    webPreferences: { preload: path.join(__dirname, "preload.js") },
  });
  console.log('[MAIN] window created');
  const indexPath = path.join(OUT_DIR, "index.html");
  const fileUrl = pathToFileURL(indexPath).toString();
  console.log("[MAIN] loadURL:", fileUrl);
  win.loadURL(fileUrl);
  win.webContents.on('did-finish-load', () => console.log('[MAIN] did-finish-load'));
  win.webContents.on('did-fail-load', (e,code,desc,url) => console.error('[MAIN] did-fail-load', code, desc, url));
  
  win.webContents.openDevTools({ mode: "detach" });
}

app.whenReady().then(() => {
  interceptStatic();
  createWindow();
  app.on("activate", () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") app.quit();
});
