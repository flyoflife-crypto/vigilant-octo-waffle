"use client";

import React from "react";
import { TextFormatMenu } from "@/components/ui/text-format-menu";
import { applyCommandToTextarea, type MdCmd } from "@/components/lib/markdown-ops";

type Props = {
  value: string;
  onChange: (v: string) => void;
  placeholder?: string;
};

export function GoalDescription({ value, onChange, placeholder }: Props) {
  const taRef = React.useRef<HTMLTextAreaElement | null>(null);
  const [menuOpen, setMenuOpen] = React.useState(false);
  const [menuPos, setMenuPos] = React.useState<{ x: number; y: number }>({ x: 0, y: 0 });

  const onContextMenu = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setMenuOpen(true);
    setMenuPos({ x: e.clientX, y: e.clientY });
    taRef.current?.focus();
  };

  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    const meta = e.ctrlKey || e.metaKey;
    if (!meta) return;
    const k = e.key.toLowerCase();
    if (k === "b" || k === "i") {
      e.preventDefault();
      const ta = taRef.current; if (!ta) return;
      const cmd: MdCmd = k === "b" ? "bold" : "italic";
      applyCommandToTextarea(ta, cmd);
    }
  };

  const onCommand = (cmd: MdCmd) => {
    const ta = taRef.current; if (!ta) return;
    applyCommandToTextarea(ta, cmd);
    // можно закрывать меню после выбора, если нужно:
    // setMenuOpen(false);
  };

  return (
    <div className="relative">
      <textarea
        ref={taRef}
        className="w-full min-h-[160px] resize-y border rounded p-2"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        onKeyDown={onKeyDown}
        onContextMenu={onContextMenu}
        placeholder={placeholder || "Write one-pager description in **Markdown**"}
        spellCheck={false}
      />

      {menuOpen && (
        <TextFormatMenu
          open={menuOpen}
          position={menuPos}
          onClose={() => setMenuOpen(false)}
          onCommand={onCommand}
        />
      )}
    </div>
  );
}
export default GoalDescription
