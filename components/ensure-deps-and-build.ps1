param(
  [string]$ImportsFile = "imports_list.txt",
  [switch]$Build = $true
)

function Get-RootFromImport([string]$s) {
  # –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: import ... from 'pkg/sub' –∏–ª–∏ "pkg/sub"
  if ($s -match "from\s+['""]([^'""]+)['""]") {
    $pkg = $Matches[1]
  } elseif ($s -match "import\s+['""]([^'""]+)['""]") {
    $pkg = $Matches[1]
  } else {
    return $null
  }

  # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ/alias
  if ($pkg.StartsWith("./") -or $pkg.StartsWith("../") -or $pkg.StartsWith("@/")) {
    return $null
  }

  # –µ—Å–ª–∏ scope-–ø–∞–∫–µ—Ç (@scope/name) ‚Äî –∫–æ—Ä–µ–Ω—å —ç—Ç–æ –¥–≤–µ —á–∞—Å—Ç–∏
  if ($pkg.StartsWith("@")) {
    $parts = $pkg.Split("/")
    if ($parts.Count -ge 2) {
      return "$($parts[0])/$($parts[1])"
    }
  }

  # –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ —Å–ª–µ—à–∞
  return $pkg.Split("/")[0]
}

if (-not (Test-Path "package.json")) {
  Write-Host "package.json not found in current directory." -ForegroundColor Red
  exit 1
}

# –°—á–∏—Ç—ã–≤–∞–µ–º package.json
$pkgJson = Get-Content package.json -Raw | ConvertFrom-Json
$deps = @{}
if ($pkgJson.dependencies)     { $pkgJson.dependencies.PSObject.Properties | ForEach-Object { $deps[$_.Name] = $_.Value } }
if ($pkgJson.devDependencies)  { $pkgJson.devDependencies.PSObject.Properties | ForEach-Object { $deps[$_.Name] = $_.Value } }

# –ë–ê–ó–û–í–´–ô –°–ü–ò–°–û–ö, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º —Ç–æ—á–Ω–æ –Ω—É–∂–µ–Ω (–∏–∑ —Ç–≤–æ–µ–≥–æ —Å—Ç–µ–∫–∞)
$baseline = @(
  "react","react-dom","next",
  "lucide-react",
  "class-variance-authority","tailwind-merge","tailwindcss","tailwindcss-animate",
  "react-markdown","remark-gfm",
  "recharts",
  "embla-carousel-react",
  "react-hook-form",
  "next-themes",
  "react-day-picker",
  "html-to-image",
  "@radix-ui/react-slot",
  "@radix-ui/react-accordion","@radix-ui/react-alert-dialog","@radix-ui/react-aspect-ratio",
  "@radix-ui/react-avatar","@radix-ui/react-checkbox","@radix-ui/react-collapsible",
  "@radix-ui/react-context-menu","@radix-ui/react-dialog","@radix-ui/react-dropdown-menu",
  "@radix-ui/react-hover-card","@radix-ui/react-label","@radix-ui/react-menubar",
  "@radix-ui/react-navigation-menu","@radix-ui/react-popover","@radix-ui/react-progress",
  "@radix-ui/react-radio-group","@radix-ui/react-scroll-area","@radix-ui/react-select",
  "@radix-ui/react-separator","@radix-ui/react-slider","@radix-ui/react-switch",
  "@radix-ui/react-tabs","@radix-ui/react-toast","@radix-ui/react-toggle-group","@radix-ui/react-tooltip"
)

$needed = [System.Collections.Generic.HashSet[string]]::new()
$baseline | ForEach-Object { [void]$needed.Add($_) }

# –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏–º–ø–æ—Ä—Ç–æ–≤ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–º
if (Test-Path $ImportsFile) {
  Get-Content $ImportsFile | ForEach-Object {
    $root = Get-RootFromImport $_
    if ($null -ne $root) { [void]$needed.Add($root) }
  }
}

# –û—Ç—Å–µ–µ–º —Ç–æ, —á—Ç–æ —É–∂–µ —Å—Ç–æ–∏—Ç (–ø–æ package.json)
$toInstall = @()
foreach ($name in $needed) {
  if (-not $deps.ContainsKey($name)) {
    $toInstall += $name
  }
}

if ($toInstall.Count -eq 0) {
  Write-Host "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ package.json." -ForegroundColor Green
} else {
  Write-Host "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ:" ($toInstall -join ", ")
  npm i $toInstall
  if ($LASTEXITCODE -ne 0) {
    Write-Host "Install failed. See errors above." -ForegroundColor Red
    exit 1
  }
}

if ($Build) {
  if (Test-Path .next) { Remove-Item .next -Recurse -Force }
  if (Test-Path out)   { Remove-Item out   -Recurse -Force }
  npm run build:web
}
